package com.quial.app.screens.onboarding.compsimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.fillMaxHeightimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.paddingimport androidx.compose.material.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.text.font.FontFamilyimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.dpimport com.quial.app.data.onboarding.Questionimport com.quial.app.data.onboarding.Statementimport com.quial.app.screens.onboarding.OnboardingUiStateHolderimport org.jetbrains.compose.resources.Fontimport quial_app.composeapp.generated.resources.DMSans_Boldimport quial_app.composeapp.generated.resources.Res@Composablefun QuestionComposable(modifier: Modifier,                       question: Question,                       uiStateHolder: OnboardingUiStateHolder) {    val optionStates = uiStateHolder.listOfStates(question.options.size)    Row(horizontalArrangement = Arrangement.SpaceAround) {        Text(            text = question.question.substring(0, 2),            fontFamily = FontFamily(Font(Res.font.DMSans_Bold))        )        Text(            text = question.question,            textAlign = TextAlign.End,            fontFamily = FontFamily(Font(Res.font.DMSans_Bold))        )    }    Column(modifier = modifier        .fillMaxHeight()        .fillMaxWidth(0.75f),        verticalArrangement = Arrangement.Center,        horizontalAlignment = Alignment.CenterHorizontally) {        repeat(question.options.size) { index ->            Row( modifier = modifier.fillMaxWidth(),                verticalAlignment = Alignment.CenterVertically,                horizontalArrangement = Arrangement.Start) {                CustomizedCheckbox(uiStateHolder = uiStateHolder,                                   question = question,                                   isChecked = optionStates[index],                                   optionState = optionStates,                                   index = index,                                   modifier = modifier                )                Text(                    text = question.options[index],                    fontFamily = FontFamily(Font(Res.font.DMSans_Bold))                    )            }        }    }}@Composablefun StatementComposable(modifier: Modifier,                        statement: Statement) {    Row(horizontalArrangement = Arrangement.SpaceAround) {        Text(            text = statement.header.substring(0, 2),            fontFamily = FontFamily(Font(Res.font.DMSans_Bold))        )        Text(            modifier = modifier.padding(start = 10.dp).fillMaxWidth(0.9f),            text = statement.header,            textAlign = TextAlign.End,            fontFamily = FontFamily(Font(Res.font.DMSans_Bold))        )    }    Box (contentAlignment = Alignment.Center,        modifier = Modifier            .fillMaxHeight()            .fillMaxWidth(0.7f)    ) {        Text(            text = statement.text,            textAlign = TextAlign.Center,            fontFamily = FontFamily(Font(Res.font.DMSans_Bold))        )    }}